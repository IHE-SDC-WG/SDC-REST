/*
 * IHE Structured Data Capture API
 *
 * This is the test of the SDC REST API   [SDC REST API Doc](https://goo.gl/YLo7Fq) and more on SDC at  [http://wiki.ihe.net/index.php/Structured_Data_Capture](http://wiki.ihe.net/index.php/Structured_Data_Capture). 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sdcworkgroup@ihe.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class SDCAPITestApiController : Controller
    { 
        /// <summary>
        /// Upload submit a form to Form Manager
        /// </summary>
        
        /// <param name="body">The SDC Form Package</param>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [Route("/IHE-SDC4/ihesdc0/1.0.0/manager/formPackage")]
        [ValidateModelState]
        [SwaggerOperation("InsertPackage")]
        public virtual IActionResult InsertPackage([FromBody]SDCFormPackage body)
        { 
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Retrieves a Form Package
        /// </summary>
        /// <remarks>Form Filler requests a Form Package from Form Manager</remarks>
        /// <param name="baseURI">The ID that uniquely identifies the author organization</param>
        /// <param name="lineage">Shared ID for all versions of an SDC package</param>
        /// <param name="version">The version of the package you wish to retrieve</param>
        /// <param name="offset">An integer which can be set to retrieve version prior or later than requested version (e.g. -1 will retrieve version before)</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid status value</response>
        [HttpGet]
        [Route("/IHE-SDC4/ihesdc0/1.0.0/manager/formPackage")]
        [ValidateModelState]
        [SwaggerOperation("RetrievePackage")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SDCFormPackage>), description: "successful operation")]
        public virtual IActionResult RetrievePackage([FromQuery]string baseURI, [FromQuery]string lineage, [FromQuery]List<string> version, [FromQuery]int? offset)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<SDCFormPackage>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            string exampleJson = null;
            exampleJson = "[ {\n  \"sdcSchemaVersion\" : \"null\",\n  \"offset\" : -1,\n  \"baseURI\" : \"www.cap.org/eCC/SDC/IHE\",\n  \"contentDomain\" : \"test\",\n  \"pkgLineage\" : \"PKG_Adrenal\",\n  \"version\" : [ \"version\", \"version\" ]\n}, {\n  \"sdcSchemaVersion\" : \"null\",\n  \"offset\" : -1,\n  \"baseURI\" : \"www.cap.org/eCC/SDC/IHE\",\n  \"contentDomain\" : \"test\",\n  \"pkgLineage\" : \"PKG_Adrenal\",\n  \"version\" : [ \"version\", \"version\" ]\n} ]";
            exampleJson = "<SDCFormPackage>\n  <baseURI>www.cap.org/eCC/SDC/IHE</baseURI>\n  <contentDomain>test</contentDomain>\n  <sdcSchemaVersion>null</sdcSchemaVersion>\n  <pkgLineage>PKG_Adrenal</pkgLineage>\n  <version>\n    <version>aeiou</version>\n  </version>\n  <offset>-1</offset>\n</SDCFormPackage>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<SDCFormPackage>>(exampleJson)
            : default(List<SDCFormPackage>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves a list of Form Packages
        /// </summary>
        /// <remarks>Form Filler requests a list of Form Packages from Form Manager</remarks>
        /// <param name="baseURI">The ID that uniquely identifies the author organization</param>
        /// <param name="contentDomain">The specialty the form is related to. contentDomain can be specified as Pathology, Radiology, Surgery, etc</param>
        /// <param name="sdcSchemaVersion">The Schema version the Package is using</param>
        /// <param name="lineage">Shared ID for all versions of an SDC package</param>
        /// <param name="version">The version of the package you wish to retrieve</param>
        /// <param name="offset">An integer which can be set to retrieve version prior or later than requested version (e.g. -1 will retrieve version before)</param>
        /// <param name="status">The current status of the form</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid status value</response>
        [HttpGet]
        [Route("/IHE-SDC4/ihesdc0/1.0.0/manager/formPackage/list")]
        [ValidateModelState]
        [SwaggerOperation("RetrievePackageList")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SDCFormPackage>), description: "successful operation")]
        public virtual IActionResult RetrievePackageList([FromQuery]string baseURI, [FromQuery]string contentDomain, [FromQuery]string sdcSchemaVersion, [FromQuery]string lineage, [FromQuery]List<string> version, [FromQuery]int? offset, [FromQuery]string status)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<SDCFormPackage>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            string exampleJson = null;
            exampleJson = "[ {\n  \"sdcSchemaVersion\" : \"null\",\n  \"offset\" : -1,\n  \"baseURI\" : \"www.cap.org/eCC/SDC/IHE\",\n  \"contentDomain\" : \"test\",\n  \"pkgLineage\" : \"PKG_Adrenal\",\n  \"version\" : [ \"version\", \"version\" ]\n}, {\n  \"sdcSchemaVersion\" : \"null\",\n  \"offset\" : -1,\n  \"baseURI\" : \"www.cap.org/eCC/SDC/IHE\",\n  \"contentDomain\" : \"test\",\n  \"pkgLineage\" : \"PKG_Adrenal\",\n  \"version\" : [ \"version\", \"version\" ]\n} ]";
            exampleJson = "<SDCFormPackage>\n  <baseURI>www.cap.org/eCC/SDC/IHE</baseURI>\n  <contentDomain>test</contentDomain>\n  <sdcSchemaVersion>null</sdcSchemaVersion>\n  <pkgLineage>PKG_Adrenal</pkgLineage>\n  <version>\n    <version>aeiou</version>\n  </version>\n  <offset>-1</offset>\n</SDCFormPackage>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<SDCFormPackage>>(exampleJson)
            : default(List<SDCFormPackage>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves a response package
        /// </summary>
        
        /// <param name="pkgInstanceID">The ID for a particular instance of a package</param>
        /// <param name="pkgInstanceVersionID">The ID for a particular version of an instance of a package</param>
        /// <param name="baseURI">The ID that uniquely identifies the author organization</param>
        /// <param name="fullPkgURI">The full URI of a package, including the baseURI</param>
        /// <param name="patientID1">A single ID for a particular patient</param>
        /// <response code="405">Invalid input</response>
        [HttpGet]
        [Route("/IHE-SDC4/ihesdc0/1.0.0/receiver/responsePackage")]
        [ValidateModelState]
        [SwaggerOperation("RetrieveResponsePackage")]
        public virtual IActionResult RetrieveResponsePackage([FromQuery]string pkgInstanceID, [FromQuery]string pkgInstanceVersionID, [FromQuery]string baseURI, [FromQuery]string fullPkgURI, [FromQuery]string patientID1)
        { 
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Retrieves a response package list
        /// </summary>
        
        /// <param name="baseURI">The ID that uniquely identifies the author organization</param>
        /// <param name="contentDomain">The specialty the form is related to. contentDomain can be specified as Pathology, Radiology, Surgery, etc</param>
        /// <param name="sdcSchemaVersion">The Schema version the Package is using</param>
        /// <param name="lineage">Shared ID for all versions of an SDC package</param>
        /// <param name="version">The version of the package you wish to retrieve</param>
        /// <param name="offset">An integer which can be set to retrieve version prior or later than requested version (e.g. -1 will retrieve version before)</param>
        /// <param name="status">The current status of the form</param>
        /// <response code="200">successful operation</response>
        /// <response code="405">Invalid input</response>
        [HttpGet]
        [Route("/IHE-SDC4/ihesdc0/1.0.0/receiver/responsePackage/list")]
        [ValidateModelState]
        [SwaggerOperation("RetrieveResponsePackagelist")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SDCFormPackage>), description: "successful operation")]
        public virtual IActionResult RetrieveResponsePackagelist([FromQuery]string baseURI, [FromQuery]string contentDomain, [FromQuery]string sdcSchemaVersion, [FromQuery]string lineage, [FromQuery]List<string> version, [FromQuery]int? offset, [FromQuery]string status)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<SDCFormPackage>));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);

            string exampleJson = null;
            exampleJson = "<SDCFormPackage>\n  <baseURI>www.cap.org/eCC/SDC/IHE</baseURI>\n  <contentDomain>test</contentDomain>\n  <sdcSchemaVersion>null</sdcSchemaVersion>\n  <pkgLineage>PKG_Adrenal</pkgLineage>\n  <version>\n    <version>aeiou</version>\n  </version>\n  <offset>-1</offset>\n</SDCFormPackage>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<SDCFormPackage>>(exampleJson)
            : default(List<SDCFormPackage>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Submit a form to Form Receiver
        /// </summary>
        
        /// <param name="body">The SDC Form Package</param>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [Route("/IHE-SDC4/ihesdc0/1.0.0/receiver/responsePackage")]
        [ValidateModelState]
        [SwaggerOperation("SubmitPackage")]
        public virtual IActionResult SubmitPackage([FromBody]SDCFormPackage body)
        { 
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);


            throw new NotImplementedException();
        }
    }
}
